package trust

/*
 * NSX Manager API
 *
 * VMware NSX Manager REST API
 *
 * API version: 4.1.3.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

// Role
type Role struct {
	// Short identifier for the role. Must be all lower case with no spaces.
	Role string `json:"role"`
	// A short, human-friendly display name of the role.
	RoleDisplayName string `json:"role_display_name,omitempty"`
}

// The roles that are limited only to the path specified. In case the path is null, the roles apply everywhere.
type RolesForPath struct {
	// Flag to delete the path in role-binding update operation. If false then path will not be deleted while updating the role-binding. If true then path will be deleted while updating the role-binding. Please note: This flag will be used only in role-binding PUT api.
	DeletePath bool `json:"delete_path,omitempty"`
	// Path of the entity in parent hierarchy.
	Path string `json:"path"`
	// Applicable roles.
	Roles []Role `json:"roles"`
}

type PrincipalIdentityWithCertificate struct {
	// Id of the stored certificate. When used with the deprecated POST /trust-management/principal-identities API this field is required.
	CertificateId string `json:"certificate_id,omitempty"`
	// Indicator whether the entities created by this principal should be protected.
	IsProtected bool `json:"is_protected,omitempty"`
	// Name of the principal.
	Name string `json:"name"`
	// Unique node-id of a principal. This is used primarily in the case where a cluster of nodes is used to make calls to the NSX Manager and the same 'name' is used so that the nodes can access and modify the same data while still accessing NSX through their individual secret (certificate or JWT). In all other cases this can be any string. 
	NodeId string `json:"node_id"`
	// The roles that are associated with this PI.
	Role string `json:"role,omitempty"`
	// The roles that are associated with this PI, limiting them to a policy path like '/infra'. In case the path is '/', the roles apply everywhere.
	RolesForPaths []RolesForPath `json:"roles_for_paths,omitempty"`
	// PEM encoding of the new certificate.
	CertificatePem string `json:"certificate_pem"`
}
